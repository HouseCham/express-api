{
	"info": {
		"_postman_id": "1cb770f4-e5f5-45ed-bc2b-dc2fc6f0b0be",
		"name": "Movie API",
		"description": "The **Movie Management API** provides a structured way to **manage movies and categories**, including **creating, retrieving, updating, and deleting records**. This API is designed for developers who need to integrate **movie-related data** into their applications.\n\n### üîê **Authentication**\n\nThis API does **not require authentication** for basic operations but can be extended to support **JWT-based authentication**.\n\n### üõ† **Core Features**\n\n- üé• **Movies:** Create, read, update, delete movies.\n    \n- üè∑ **Categories:** Manage movie categories.\n    \n- üîç **Search & Filters:** Filter movies by **category, title, and keywords**.\n    \n- üìë **Pagination & Sorting:** Retrieve movies with **pagination and sorting options**.\n    \n\n## üìå **Endpoints**\n\n### üé• **Movies**\n\n| Method | Endpoint | Description |\n| --- | --- | --- |\n| `GET` | `/movies?[queryParams]` | Get a list of all movies |\n| `GET` | `/movies/:id` | Get a movie by ID |\n| `POST` | `/movies` | Create a new movie |\n| `PUT` | `/movies` | Update an existing movie |\n| `DELETE` | `/movies` | Soft delete a movie |\n\n### üè∑ **Categories**\n\n| Method | Endpoint | Description |\n| --- | --- | --- |\n| `GET` | `/categories?[queryParams]` | Get a list of all categories |\n| `GET` | `/categories/:id` | Get a category by ID |\n| `POST` | `/categories` | Create a new category |\n| `PUT` | `/categories` | Update an existing category |\n| `DELETE` | `/categories` | Delete a category |\n\n## üìå Common Interface **Error Handling**\n\nAll responses follow a **consistent error format**:\n\n### ‚ö† **Error Response Example (****`400 Bad Request`****)**\n\n``` json\n{\n  \"status\": 400,\n  \"message\": \"Validation error\",\n  \"data\": [\n    {\n      \"path\": \"title\",\n      \"message\": \"Title is required\"\n    }\n  ]\n}\n\n ```\n\nüî¥ **Common Error Codes**\n\n| Status Code | Meaning | Reason |\n| --- | --- | --- |\n| `400` | **Bad Request** | Validation error |\n| `404` | **Not Found** | Resource does not exist |\n| `409` | **Conflict** | Duplicate entry |\n| `500` | **Internal Server Error** | Unexpected server issue |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28449248"
	},
	"item": [
		{
			"name": "Movies",
			"item": [
				{
					"name": "List Movies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/movies?page=1&itemsPerPage=10&categoryId=1&sortBy=title&sortOrder=ASC&searchQuery=nostefaru",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "itemsPerPage",
									"value": "10"
								},
								{
									"key": "categoryId",
									"value": "1"
								},
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "searchQuery",
									"value": "nostefaru"
								}
							]
						},
						"description": "üé• **Get All Movies**\n\n### **Description:**\n\nRetrieves a **list of all movies**, optionally filtered and paginated.\n\n### **Query Parameters (Optional):**\n\n| Parameter | Type | Required | Description | Example Values |\n| --- | --- | --- | --- | --- |\n| `page` | `number` | ‚ùå No | The page number for pagination | `1`, `2`, `3` |\n| `limit` | `number` | ‚ùå No | Number of movies per page (default: `10`) | `10`, `20`, `50` |\n| `searchQuery` | `string` | ‚ùå No | Search movies by title or description | `\"Inception\"`, `\"Sci-Fi\"` |\n| `categoryId` | `number` | ‚ùå No | Filter movies by category ID | `1`, `2`, `3` |\n| `sortBy` | `string` | ‚ùå No | Sort movies by `title` or `createdAt` | `\"title\"`, `\"createdAt\"` |\n| `sortOrder` | `string` | ‚ùå No | Sort order: `ASC` or `DESC` | `\"ASC\"`, `\"DESC\"` |\n\n### **Request Example:**\n\n#### ‚úÖ **Fetching paginated movies sorted by title**\n\n```\nplaintextCopyEditGET /api/v1/movies?page=1&limit=5&sortBy=title&sortOrder=ASC\n\n ```\n\n#### ‚úÖ **Searching for a movie with the title \"Nosferatu\"**\n\n```\nplaintextCopyEditGET /api/v1/movies?searchQuery=Nosferatu\n\n ```\n\n#### ‚úÖ **Filtering by category (Category ID = 2)**\n\n```\nplaintextCopyEditGET /api/v1/movies?categoryId=2\n\n ```\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Movies retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"Talk to Me\",\n      \"description\": \"An Australian supernatural horror film.\",\n      \"category\": {\n        \"id\": 1,\n        \"name\": \"Horror\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Hereditary\",\n      \"description\": \"A psychological horror film.\",\n      \"category\": {\n        \"id\": 1,\n        \"name\": \"Horror\"\n      }\n    }\n  ]\n}\n\n ```\n\n### **Response Example (No movies found):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"No movies found\",\n  \"data\": []\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get movie by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/movies/1",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"movies",
								"1"
							]
						},
						"description": "üé• **Get Movie by ID**\n\n### **Description:**\n\nRetrieves a **single movie** by its unique **ID**.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a movie | `1`, `2`, `99` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Fetching a movie with ID** **`1`**\n\n```\nGET /api/v1/movies/1\n\n ```\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Movie retrieved successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"Talk to Me\",\n    \"description\": \"An Australian supernatural horror film.\",\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Horror\"\n    }\n  }\n}\n\n ```\n\n### **Response Example (Movie Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Movie not found\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Delete movie",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/movies/5",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"movies",
								"5"
							]
						},
						"description": "üóë **Delete a Movie**\n\n### **Description:**\n\nSoft deletes a **movie** by its **ID**.  \n  \nInstead of permanently removing the record, it **updates the** **`deletedAt`** **field** to mark it as deleted.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a movie | `1`, `2`, `99` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Deleting a movie with ID** **`1`**\n\n```\nDELETE /api/v1/movies/1\n\n ```\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Movie deleted successfully\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Movie Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Movie not found\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create movie",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Nosferatu\",\n    \"description\": \"Nosferatu is a 2024 American Gothic horror film written and directed by Robert Eggers. It is a remake of the film Nosferatu: A Symphony of Horror (1922), itself an unauthorized adaptation of Bram Stoker's novel Dracula (1897).\",\n    \"categoryId\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost3000}}/api/v1/movies",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							]
						},
						"description": "## üìå **Request & Response Formats**\n\n### üì• **Request Body (Example: Create a Movie)**\n\n``` json\n{\n  \"title\": \"Nosferatu\",\n  \"description\": \"A remake of the 1922 classic horror film.\",\n  \"categoryId\": 1\n}\n\n ```\n\nüì§ **Response (Example: Movie Created)**\n\n``` json\n{\n  \"status\": 201,\n  \"message\": \"Movie created successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"Nosferatu\",\n    \"description\": \"A remake of the 1922 classic horror film.\",\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Horror\"\n    }\n  }\n}\n\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update movie",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"title\": \"Nosferatu updated\",\n    \"description\": \"Nosferatu description updated\",\n    \"categoryId\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost3000}}/api/v1/movies",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							]
						},
						"description": "‚úèÔ∏è **Update a Movie (PUT)**\n\n### **Description:**\n\nUpdates an **existing movie** with the provided data.  \n  \nOnly **valid fields** will be updated. If a field is omitted, it **remains unchanged**.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a movie | `1`, `2`, `99` |\n\n### **Request Body:**\n\n| Field | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `title` | `string` | ‚úÖ Yes | The movie title | `\"Inception\"` |\n| `description` | `string` | ‚úÖ Yes | A brief description of the movie | `\"A mind-bending thriller\"` |\n| `categoryId` | `number` | ‚úÖ Yes | The ID of the category | `1`, `2`, `3` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Updating movie with ID** **`1`**\n\n```\nplaintextCopyEditPUT /movies/1\n\n ```\n\n#### **Request Body:**\n\n``` json\n{\n  \"title\": \"Updated Inception\",\n  \"description\": \"A sci-fi movie about dream manipulation\",\n  \"categoryId\": 2\n}\n\n ```\n\n---\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Movie updated successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"Updated Inception\",\n    \"description\": \"A sci-fi movie about dream manipulation\",\n    \"category\": {\n      \"id\": 2,\n      \"name\": \"Science Fiction\"\n    }\n  }\n}\n\n ```\n\n### **Response Example (Movie Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Movie not found\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Category Does Not Exist - 400 Bad Request):**\n\n``` json\n{\n  \"status\": 400,\n  \"message\": \"There is no category with the given id: 999\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Duplicate Movie Title - 409 Conflict):**\n\n``` json\n{\n  \"status\": 409,\n  \"message\": \"Movie title already exists\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "The following endpoints allow users to perform CRUD operations for the **movies entity** within the system."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/categories",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "üè∑ List **Categories**\n\n### **Description:**\n\nRetrieves a **list of all categories**.\n\nRequest Example:\n\n#### ‚úÖ **Fetching paginated categories sorted by name**\n\n```\nGET /categories\n\n ```\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Categories retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Horror\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Science Fiction\"\n    }\n  ]\n}\n\n ```\n\n### **Response Example No Categories Found:**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"No categories found\",\n  \"data\": []\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Terror\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost3000}}/api/v1/categories",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "üè∑ **Create a New Category**\n\n### **Description:**\n\nCreates a **new category** in the system.  \n  \nThe category **must have a unique name**.\n\n### **Request Body:**\n\n| Field | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `name` | `string` | ‚úÖ Yes | The category name | `\"Science Fiction\"` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Creating a new category**\n\n```\nPOST /categories\n\n ```\n\n#### **Request Body:**\n\n``` json\n{\n  \"name\": \"Science Fiction\"\n}\n\n ```\n\n---\n\n### **Response Example (Success - 201 Created):**\n\n``` json\n{\n  \"status\": 201,\n  \"message\": \"Category created successfully\",\n  \"data\": {\n    \"id\": 5,\n    \"name\": \"Science Fiction\"\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update category",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"name\": \"Terror\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost3000}}/api/v1/categories",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "‚úèÔ∏è **Update a Category (PUT)**\n\n### **Description:**\n\nUpdates an **existing category** with the provided data.  \n  \nOnly **valid fields** will be updated. If a field is omitted, it **remains unchanged**.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a category | `1`, `2`, `99` |\n\n### **Request Body:**\n\n| Field | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `name` | `string` | ‚úÖ Yes | The category name | `\"Science Fiction\"` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Updating category with ID** **`1`**\n\n```\nPUT /categories/1\n\n ```\n\n#### **Request Body:**\n\n``` json\n{\n  \"name\": \"Updated Horror\"\n}\n\n ```\n\n---\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Category updated successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Updated Horror\"\n  }\n}\n\n ```\n\n### **Response Example (Category Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Category not found\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Invalid Data - 400 Bad Request):**\n\n``` json\n{\n  \"status\": 400,\n  \"message\": \"Validation error\",\n  \"data\": [\n    {\n      \"path\": \"name\",\n      \"message\": \"Name is required\"\n    }\n  ]\n}\n\n ```\n\n### **Response Example (Duplicate Category Name - 409 Conflict):**\n\n``` json\n{\n  \"status\": 409,\n  \"message\": \"Category name already exists\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get Category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/categories/999",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"999"
							]
						},
						"description": "üè∑ **Get Category by ID**\n\n### **Description:**\n\nRetrieves a **single category** by its unique **ID**.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a category | `1`, `2`, `99` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Fetching a category with ID** **`1`**\n\n```\nGET /categories/1\n\n ```\n\n---\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Category retrieved successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Horror\"\n  }\n}\n\n ```\n\n### **Response Example (Category Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Category not found\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Delete category",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localhost3000}}/api/v1/categories/1",
							"host": [
								"{{localhost3000}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"1"
							]
						},
						"description": "üóë **Delete a Category**\n\n### **Description:**\n\nDeletes a **category** by its **ID**.\n\nIf the category is **associated with movies**, it **cannot be deleted** due to foreign key constraints.\n\n### **Path Parameters:**\n\n| Parameter | Type | Required | Description | Example |\n| --- | --- | --- | --- | --- |\n| `id` | `number` | ‚úÖ Yes | The unique identifier of a category | `1`, `2`, `99` |\n\n---\n\n### **Request Example:**\n\n#### ‚úÖ **Deleting a category with ID** **`1`**\n\n```\nDELETE /categories/1\n\n ```\n\n---\n\n### **Response Example (Success - 200 OK):**\n\n``` json\n{\n  \"status\": 200,\n  \"message\": \"Category deleted successfully\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Category Not Found - 404):**\n\n``` json\n{\n  \"status\": 404,\n  \"message\": \"Category not found\",\n  \"data\": null\n}\n\n ```\n\n### **Response Example (Category Has Associated Movies - 409 Conflict):**\n\n``` json\n{\n  \"status\": 409,\n  \"message\": \"Cannot delete category with associated movies\",\n  \"data\": null\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "The following endpoints allow users to perform CRUD operations for the **categories entity** within the system."
		}
	]
}